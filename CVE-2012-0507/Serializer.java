import java.io.*;

public class Serializer {
    private byte[] stream;
    private int index;

    public Serializer(int len) {
        this.stream = new byte[len];
        this.index = 0;
    }

    /**
     * Appends a byte to the stream
     */
    private void append(byte b) {
        if (this.index >= this.stream.length) {
            /* TODO */
            System.out.println("Error");
            System.exit(0);
        }
        this.stream[this.index++] = b;
    }

    /**
     * Appends a short to the stream
     * 0xaabb, 0xaa will be appended first
     */
    private void append(short s) {
        this.append((byte)(s >>> 8));
        this.append((byte)(s));
    }

    /**
     * Appends an int to the stream
     * 0xaabbccdd, 0xaa will be appended first
     */
    private void append(int l) {
        for (int i = 3;i>=0;i--) {
            this.append((byte)(l >>> (8*i)));
        }
    }

    /**
     * Appends a long to the stream
     * 0xaabbccddeeffgghh, 0xaa will be appended first
     */
    private void append(long l) {
        for (int i = 7;i>=0;i--) {
            this.append((byte)(l >>> (8*i)));
        }
    }

    /**
     * Appends a String, byte by byte
     */
    private void append(String s) {
        for (int i = 0;i<s.length();i++) {
            byte b = (byte)s.charAt(i);
            this.append(b);
        }
    }

    /**
     * Initializes the stream with magic and version bytes
     */
    public void initialize() {
        this.append(ObjectStreamConstants.STREAM_MAGIC);
        this.append(ObjectStreamConstants.STREAM_VERSION);
    }

    /**
     * Begin object
     */
    public void beginObject() {
        this.append(ObjectStreamConstants.TC_OBJECT);
    }

    /**
     * Begin object reference
     */
    public void beginObjectReference() {
        this.append(ObjectStreamConstants.TC_REFERENCE);
    }

    /**
     * Begin class
     */
    public void beginClass() {
        this.append(ObjectStreamConstants.TC_CLASSDESC);
    }

    /**
     * Append Length
     */
    public void setLength(short len) {
        this.append(len);
    }

    /**
     * Append Length
     */
    public void setLength(int len) {
        this.append(len);
    }

    /**
     * Append reference
     */
    public void setReference(int ref) {
        this.append(ref);
    }

    /**
     * Append Name
     */
    public void setName(String name) {
        this.append(name);
    }

    /**
     * Append serialVersionUID
     */
    public void setSVUID(long sVUID) {
        this.append(sVUID);
    }

    /**
     * Append flags
     */
    public void setFlags(byte flags) {
        this.append(flags);
    }

    /**
     * Append number of fields
     */
    public void setNumFields(short numFields) {
        this.append(numFields);
    }

    /**
     * Begin Int
     */
    public void beginInt() {
        this.append("I");
    }

    /**
     * Begin String
     */
    public void beginString() {
        this.append(ObjectStreamConstants.TC_STRING);
    }

    /**
     * Begin Array Type
     */
    public void beginArrayType() {
        this.append("[");
    }

    /**
     * End block data
     */
    public void endBlockData() {
        this.append(ObjectStreamConstants.TC_ENDBLOCKDATA);
    }

    /**
     * No more Super classes
     */
    public void noSuperClassLeft() {
        this.setNull();
    }

    /**
     * Set int's data
     */
    public void setDataInt(int i) {
        this.append(i);
    }
    
    /**
     * Set NULL
    */
    public void setNull() {
        this.append(ObjectStreamConstants.TC_NULL);
    }

    /**
     * Begin array
     */
    public void beginArray() {
        this.append(ObjectStreamConstants.TC_ARRAY);
    }

    /**
     * Get deserialized object
     */
    public Object deserialize() {
        try {
            ByteArrayInputStream bain = new ByteArrayInputStream(this.stream);
            ObjectInputStream oin = new ObjectInputStream(bain);
            Object obj = oin.readObject();
            return obj;
        } catch (Exception e) {
            System.out.println(e);
            return null;
        }
    }

    /**
     * Debug, print out the bytes
     */
    private void debugBytes(byte[] bytes, int len) {
        for (int i = 0;i<len;i++) {
            System.out.printf("%02x ", bytes[i]);
        }
        System.out.println();
    }

    /**
     * Debug, serialized bytes
     */
    public void debug() {
        this.debugBytes(this.stream, this.index);
    }

    /**
     * Debug, expected bytes
     */
    public void debugObject(Object o) {
        byte[] bytes;

        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(o);
            bytes = baos.toByteArray();
            this.debugBytes(bytes, bytes.length);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}